import{formatPrice as formatCustomPrice}from"./utils.js";import{addToCart as customAddToCart}from"./cart/setupCart.js";const display=(t,e,s)=>{e.innerHTML=t.map((t=>{const{id:e,name:s,image:r,price:o}=t;return` <article class="product">\n          <div class="product-container">\n            <img src="${r}" class="product-img img" alt="${s}" />\n           \n            <div class="product-icons">\n              <a href="product.html?id=${e}" class="product-icon">\n                <i class="fas fa-search"></i>\n              </a>\n              <button class="product-cart-btn product-icon" data-id="${e}">\n                <i class="fas fa-shopping-cart"></i>\n              </button>\n            </div>\n          </div>\n          <footer>\n            <p class="product-name">${s}</p>\n            <h4 class="product-price">${formatCustomPrice(o)}</h4>\n          </footer>\n        </article> `})).join(""),s||e.addEventListener("click",(function(t){const e=t.target.parentElement;e.classList.contains("product-cart-btn")&&customAddToCart(e.dataset.id)}))};export default display;import{allProductsUrl as allProductsCustomUrl}from"./utils.js";const fetchProducts=async()=>{const t=await fetch(allProductsCustomUrl).catch((t=>console.log(t)));return t?t.json():t};export default fetchProducts;import{getStorageItem as getCustomStorageItem,setStorageItem as setCustomStorageItem}from"./utils.js";let store=getCustomStorageItem("store");const setupStore=t=>{store=t.map((t=>{const{id:e,fields:{featured:s,name:r,price:o,company:a,colors:n,image:c}}=t;return{id:e,featured:s,name:r,price:o,company:a,colors:n,image:c[0].thumbnails.large.url}})),setCustomStorageItem("store",store)},findProduct=t=>store.find((e=>e.id===t));export{store,setupStore,findProduct};import{getElement as getCustomElement}from"./utils.js";const toggleNav=getCustomElement(".toggle-nav"),sidebarOverlay=getCustomElement(".sidebar-overlay"),closeBtn=getCustomElement(".sidebar-close");toggleNav.addEventListener("click",(()=>{sidebarOverlay.classList.add("show")})),closeBtn.addEventListener("click",(()=>{sidebarOverlay.classList.remove("show")}));const allProductsUrl="https://course-api.com/javascript-store-products",singleProductUrl="https://course-api.com/javascript-store-single-product",getElement=t=>{const e=document.querySelector(t);if(e)return e;throw new Error(`Please check "${t}" selector, no such element exist`)},formatPrice=t=>new Intl.NumberFormat("en-US",{style:"currency",currency:"USD"}).format((t/100).toFixed(2)),getStorageItem=t=>{let e=localStorage.getItem(t);return e=e?JSON.parse(localStorage.getItem(t)):[],e},setStorageItem=(t,e)=>{localStorage.setItem(t,JSON.stringify(e))};export{allProductsUrl,singleProductUrl,getElement,formatPrice,getStorageItem,setStorageItem};import{formatPrice as formatCustomPrice,getElement as getCustomElement}from"../utils.js";const cartItemsDOM=getCustomElement(".cart-items"),addToCartDOM=({id:t,name:e,price:s,image:r,amount:o})=>{const a=document.createElement("article");a.classList.add("cart-item"),a.setAttribute("data-id",t),a.innerHTML=`\n    <img src="${r}"\n              class="cart-item-img"\n              alt="${e}"\n            />  \n            <div>\n              <h4 class="cart-item-name">${e}</h4>\n              <p class="cart-item-price">${formatCustomPrice(s)}</p>\n              <button class="cart-item-remove-btn" data-id="${t}">remove</button>\n            </div>\n          \n            <div>\n              <button class="cart-item-increase-btn" data-id="${t}">\n                <i class="fas fa-chevron-up"></i>\n              </button>\n              <p class="cart-item-amount" data-id="${t}">${o}</p>\n              <button class="cart-item-decrease-btn" data-id="${t}">\n                <i class="fas fa-chevron-down"></i>\n              </button>\n            </div>\n  `,cartItemsDOM.appendChild(a)};export default addToCartDOM;import{getStorageItem as getCustomStorageItem,setStorageItem as setCustomStorageItem,formatPrice as formatCustomPrice,getElement as getCustomElement}from"../utils.js";import{openCart as customOpenCart}from"./toggleCart.js";import{findProduct}from"../store.js";import addToCartDOM from"./addToCartDOM.js";const cartItemCountDOM=getCustomElement(".cart-item-count"),cartItemsDOMSetup=getCustomElement(".cart-items"),cartTotalDOM=getCustomElement(".cart-total");let cart=getCustomStorageItem("cart");export const addToCart=t=>{if(cart.find((e=>e.id===t))){const e=increaseAmount(t);[...cartItemsDOMSetup.querySelectorAll(".cart-item-amount")].find((e=>e.dataset.id===t)).textContent=e}else{let e=findProduct(t);e={...e,amount:1},cart=[...cart,e],addToCartDOM(e)}displayCartItemCount(),displayCartTotal(),setCustomStorageItem("cart",cart),customOpenCart()};function displayCartItemCount(){const t=cart.reduce(((t,e)=>t+e.amount),0);cartItemCountDOM.textContent=t}function displayCartTotal(){let t=cart.reduce(((t,e)=>t+e.price*e.amount),0);cartTotalDOM.textContent=`Total : ${formatCustomPrice(t)} `}function displayCartItemsDOM(){cart.forEach((t=>{addToCartDOM(t)}))}function removeItem(t){cart=cart.filter((e=>e.id!==t))}function increaseAmount(t){let e;return cart=cart.map((s=>(s.id===t&&(e=s.amount+1,s={...s,amount:e}),s))),e}function decreaseAmount(t){let e;return cart=cart.map((s=>(s.id===t&&(e=s.amount-1,s={...s,amount:e}),s))),e}function setupCartFunctionality(){cartItemsDOM.addEventListener("click",(function(t){const e=t.target,s=t.target.parentElement,r=t.target.dataset.id,o=t.target.parentElement.dataset.id;if(e.classList.contains("cart-item-remove-btn")&&(removeItem(r),e.parentElement.parentElement.remove()),s.classList.contains("cart-item-increase-btn")){const t=increaseAmount(o);s.nextElementSibling.textContent=t}if(s.classList.contains("cart-item-decrease-btn")){const t=decreaseAmount(o);0===t?(removeItem(o),s.parentElement.parentElement.remove()):s.previousElementSibling.textContent=t}displayCartItemCount(),displayCartTotal(),setCustomStorageItem("cart",cart)}))}const initCart=()=>{displayCartItemCount(),displayCartTotal(),displayCartItemsDOM(),setupCartFunctionality()};displayCartItemCount(),displayCartTotal(),displayCartItemsDOM(),setupCartFunctionality();import{getElement as getCustomElement}from"../utils.js";const cartOverlay=getCustomElement(".cart-overlay"),closeCartBtn=getCustomElement(".cart-close"),toggleCartBtn=getCustomElement(".toggle-cart");toggleCartBtn.addEventListener("click",(()=>{cartOverlay.classList.add("show")})),closeCartBtn.addEventListener("click",(()=>{cartOverlay.classList.remove("show")}));export const openCart=()=>{cartOverlay.classList.add("show")};import{getElement as getCustomElement}from"../utils.js";import display from"../displayProducts.js";const setupCompanies=t=>{let e=["all",...new Set(t.map((t=>t.company)))];const s=getCustomElement(".companies");s.innerHTML=e.map((t=>` <button class="company-btn">${t}</button>`)).join(""),s.addEventListener("click",(function(e){const s=e.target;if(s.classList.contains("company-btn")){let r=[];r="all"===s.textContent?[...t]:t.filter((t=>t.company===e.target.textContent)),display(r,getCustomElement(".products-container"),!0)}}))};export default setupCompanies;import{getElement as getCustomElement}from"../utils.js";import display from"../displayProducts.js";const setupPrice=t=>{const e=getCustomElement(".price-filter"),s=getCustomElement(".price-value");let r=t.map((t=>t.price));r=Math.max(...r),r=Math.ceil(r/100),e.value=r,e.max=r,e.min=0,s.textContent=`Value : $${r}`,e.addEventListener("input",(function(){const r=parseInt(e.value);s.textContent=`Value : $${r}`;let o=t.filter((t=>t.price/100<=r));if(display(o,getCustomElement(".products-container"),!0),o.length<1){getCustomElement(".products-container").innerHTML='<h3 class="filter-error">sorry, no products matched your search</h3>'}}))};export default setupPrice;import{getElement as getCustomElement}from"../utils.js";import display from"../displayProducts.js";const setupSearch=t=>{const e=getCustomElement(".input-form"),s=getCustomElement(".search-input");e.addEventListener("keyup",(function(){const e=s.value;if(e){const s=t.filter((t=>{let{name:s}=t;if(s=s.toLowerCase(),s.startsWith(e))return t}));if(display(s,getCustomElement(".products-container"),!0),s.length<1){getCustomElement(".products-container").innerHTML='<h3 class="filter-error">\n       sorry, no products matched your search\n       </h3>'}}else display(t,getCustomElement(".products-container"),!0)}))};export default setupSearch;import"../toggleSidebar.js";import"../cart/toggleCart.js";import"../cart/setupCart.js";import"../toggleSidebar.js";import"../cart/toggleCart.js";import"../cart/setupCart.js";import{addToCart as customAddToCart}from"../cart/setupCart.js";import{singleProductUrl,getElement as getCustomElement,formatPrice as formatCustomPrice}from"../utils.js";const loading=getCustomElement(".page-loading"),centerDOM=getCustomElement(".single-product-center"),pageTitleDOM=getCustomElement(".page-hero-title"),imgDOM=getCustomElement(".single-product-img"),titleDOM=getCustomElement(".single-product-title"),companyDOM=getCustomElement(".single-product-company"),priceDOM=getCustomElement(".single-product-price"),colorsDOM=getCustomElement(".single-product-colors"),descDOM=getCustomElement(".single-product-desc"),cartBtn=getCustomElement(".addToCartBtn");let productID;window.addEventListener("DOMContentLoaded",(async function(){const t=window.location.search;try{const e=await fetch(`${singleProductUrl}${t}`);if(e.status>=200&&e.status<=299){const t=await e.json(),{id:s,fields:r}=t;productID=s;const{name:o,company:a,price:n,colors:c,description:i}=r,m=r.image[0].thumbnails.large.url;document.title=`${o.toUpperCase()} | Comfy`,pageTitleDOM.textContent=`Home / ${o}`,imgDOM.src=m,titleDOM.textContent=o,companyDOM.textContent=`by ${a}`,priceDOM.textContent=formatCustomPrice(n),descDOM.textContent=i,c.forEach((t=>{const e=document.createElement("span");e.classList.add("product-color"),e.style.backgroundColor=`${t}`,colorsDOM.appendChild(e)}))}else console.log(e.status,e.statusText),centerDOM.innerHTML='\n    <div>\n    <h3 class="error">sorry, something went wrong</h3>\n    <a href="index.html" class="btn">back home</a>\n    </div> \n     '}catch(t){console.log(t)}loading.style.display="none"})),cartBtn.addEventListener("click",(function(){customAddToCart(productID)}));import"../toggleSidebar.js";import"../cart/toggleCart.js";import"../cart/setupCart.js";import setupSearch from"../filters/search.js";import setupCompanies from"../filters/companies.js";import setupPrice from"../filters/price.js";import{store,setupStore}from"../store.js";import display from"../displayProducts.js";import{getElement as getCustomElement}from"../utils.js";import fetchProducts from"../fetchProducts.js";const initProduct=async()=>{const t=getCustomElement(".page-loading");if(store.length<1){const t=await fetchProducts();setupStore(t)}display(store,getCustomElement(".products-container")),setupSearch(store),setupCompanies(store),setupPrice(store),t.style.display="none"};initProduct();const{dest:dest,src:src,series:series}=require("gulp"),htmlmin=require("gulp-htmlmin"),concat=require("gulp-concat"),cleanCSS=require("gulp-clean-css"),rename=require("gulp-rename"),terser=require("gulp-terser"),imageop=require("gulp-image-optimization"),replace=require("gulp-replace"),globs={html:["./*.html","./src/**/*.html"],css:["./*.css","./src/**/*.css"],js:["./src/**/*.js","./*.js"],img:"./images/*.{png,jpg,gif,svg}"};exports.html=()=>src(globs.html).pipe(htmlmin({collapseWhitespace:!0,removeComments:!0})).pipe(replace('src="images/','src="../images/')).pipe(replace('href="styles.css','href="../styles.min.css')).pipe(replace('src="script.min.js','src="../script.min.js')).pipe(dest("dist")),exports.css=()=>src(globs.css).pipe(concat("styles.min.css")).pipe(cleanCSS({compatibility:"ie8"})).pipe(replace('url("images/','url("../images/')).pipe(dest("dist")),exports.js=()=>src(globs.js).pipe(concat("script.min.js")).pipe(rename("bundle.min.js")).pipe(terser()).pipe(dest("dist")),exports.img=()=>src(globs.img).pipe(imageop()).pipe(dest("dist/images")),exports.build=series(exports.html,exports.css,exports.js,exports.img),exports.default=exports.build;import"./src/toggleSidebar.js";import"./src/cart/toggleCart.js";import"./src/cart/setupCart.js";import fetchProducts from"./src/fetchProducts.js";import{setupStore,store}from"./src/store.js";import display from"./src/displayProducts.js";import{getElement}from"./src/utils.js";const init=async()=>{const t=await fetchProducts();if(t){setupStore(t);const e=store.filter((t=>!0===t.featured));display(e,getElement(".featured-center"))}};window.addEventListener("DOMContentLoaded",init);